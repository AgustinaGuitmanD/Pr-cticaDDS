@startuml
'https://plantuml.com/class-diagram
Cliente -->"*" Instalacion
Cliente -->"*" MedioContacto
Cliente -->"*" Ubicación
Instalacion --> Servicio
Instalacion --> IadapterAlturaMax
Instalacion --> IadapterDistancia
Presupuesto --> EstadoPresupuesto
Presupuesto --> HistorialEstadoPresupuesto
HistorialEstadoPresupuesto --> EstadoPresupuesto
Cliente -->"*" Presupuesto
Presupuesto --> Cliente
Instalacion --> Repetidor
AdapterAlturaMax -->  UTNGEOHMAX
AdapterDistancia --> DistanceMatrixAPI
Presupuesto --> Servicio
Presupuesto --> Ubicación
class Cliente {
    - nombre: String,
    - apellido: String,
    - dni: Integer,
    - contactos: List<MedioContacto>
    - direccion: List<Ubicación>
    - serviviosContratados: List<Servcios>
    - presupuestos: List<Presupuesto>

    + cantServiciosContratados(): Integer
    + presupuestosPedidos(): Integer
    + agregarInstalación(Instalación): void
     + agregarPresupuesto(Presupuesto): void
}

class MedioContacto {
    - tipo: String
    - valor: String
}


class Ubicación {
    - Altitud: Double
    - Longitud: Double
}

abstract Servicio {
    - tipo: String
    # precioBase(): double

}

class Instalacion {
    - cliente: Cliente
    - servicio: Servicio
    - adapterAlturaMax: IadapterAlturaMax
    - adapterDistancia: IadapterDistancia
    - repetidor: Repetidor
    - ubicacion: Ubicación

    # calculareRecargoPorAltura(): Double
    # calculareRecargoPorDistancia(): Double
    + calularPrecioTotalServicio(): Double
}

interface IadapterAlturaMax {
    + calculareRecargoPorAltura(): Double
}

interface IadapterDistancia {
    + calculareRecargoPorDistancia(): double
}

class AdapterAlturaMax implements IadapterAlturaMax {
    + adaptada: UTNGEOHMAX
    + calculareRecargoPorAltura(): Double
}

class AdapterDistancia implements IadapterDistancia {
      + adaptada: DistanceMatrixAPI
      + calculareRecargoPorDistancia(): Double

}

class DistanceMatrixAPI {
    calculareRecargoPorAltura(Double, Double): Double
}
class UTNGEOHMAX {
    calculareRecargoPorDistancia(Double, Double, Double): Double
}
class Repetidor {
    - direccionFisica: String
    - radioDeAlcance: Double
    - nombre: String
    - coordenadas: Ubicación
    - cantMaxDeConexiones: Integer
    - mailEncargadoCuadrilla: String

    + estaDisponible(): Boolean
    - mandarMailEncargado(): void
}

class Presupuesto {
    - cliente: Cliente
    - coordenada: Ubicación
    - estadoActual: EstadoPresupuesto
    - historialEstadoPresupuesto: List<HistorialEstadoPresupuesto>
    - recargoPorMultiplesRechazos: Double
    - servicio: Servicio

    - totalRecargo(): Double
    - totalDescuento(): Double
    - costoInstalacion(): Double
    - registrarPedidoPresupuesto(): void
    + costoTotal(Double): Double
}
class HistorialEstadoPresupuesto {
    estado: EstadoPresupuesto
    diaModificación: localDateTime
}


enum EstadoPresupuesto {
    ACTIVO
    VENCIDO
    APROBADO
    RECHAZADO
}
@enduml